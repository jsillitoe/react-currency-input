{"version":3,"file":"react-currency-input.min.js","sources":["../src/mask.js","../src/object-assign-polyfill.js","../src/index.js"],"sourcesContent":["\r\nexport default function mask(value, precision = 2, decimalSeparator = '.', thousandSeparator = ',', allowNegative = false, prefix = '', suffix = ''){\r\n    // provide some default values and arg validation.\r\n    if (precision < 0) { precision = 0; } // precision cannot be negative\r\n    if (precision > 20) { precision = 20; } // precision cannot be greater than 20\r\n    \r\n    if (value === null || value===undefined) {\r\n          return {\r\n              value: 0,\r\n              maskedValue: ''\r\n          };\r\n     }\r\n  \r\n    value = String(value); //if the given value is a Number, let's convert into String to manipulate that\r\n\r\n    if (value.length == 0) {\r\n        return {\r\n            value: 0,\r\n            maskedValue: ''\r\n        };\r\n    }\r\n\r\n\r\n    // extract digits. if no digits, fill in a zero.\r\n    let digits = value.match(/\\d/g) || ['0'];\r\n    \r\n    let numberIsNegative = false;\r\n    if (allowNegative) {\r\n        let negativeSignCount = (value.match(/-/g) || []).length;\r\n        // number will be negative if we have an odd number of \"-\"\r\n        // ideally, we should only ever have 0, 1 or 2 (positive number, making a number negative\r\n        // and making a negative number positive, respectively)\r\n        numberIsNegative = negativeSignCount % 2 === 1;\r\n        \r\n        // if every digit in the array is '0', then the number should never be negative\r\n        let allDigitsAreZero = true;\r\n        for (let idx=0; idx < digits.length; idx += 1) {\r\n            if(digits[idx] !== '0') {\r\n                allDigitsAreZero = false;\r\n                break;\r\n            }\r\n        }\r\n        if (allDigitsAreZero) {\r\n            numberIsNegative = false;\r\n        }\r\n    }\r\n\r\n    // zero-pad a input\r\n    while (digits.length <= precision) { digits.unshift('0'); }\r\n\r\n    if (precision > 0) {\r\n        // add the decimal separator\r\n        digits.splice(digits.length - precision, 0, \".\");\r\n    }\r\n\r\n    // clean up extraneous digits like leading zeros.\r\n    digits = Number(digits.join('')).toFixed(precision).split('');\r\n    let raw = Number(digits.join(''));\r\n\r\n    let decimalpos = digits.length - precision - 1;  // -1 needed to position the decimal separator before the digits.\r\n    if (precision > 0) {\r\n        // set the final decimal separator\r\n        digits[decimalpos] = decimalSeparator;\r\n    } else {\r\n        // when precision is 0, there is no decimal separator.\r\n        decimalpos = digits.length;\r\n    }\r\n\r\n    // add in any thousand separators\r\n    for (let x=decimalpos - 3; x > 0; x = x - 3) {\r\n        digits.splice(x, 0, thousandSeparator);\r\n    }\r\n\r\n    // if we have a prefix or suffix, add them in.\r\n    if (prefix.length > 0) { digits.unshift(prefix); }\r\n    if (suffix.length > 0) { digits.push(suffix); }\r\n\r\n    // if the number is negative, insert a \"-\" to\r\n    // the front of the array and negate the raw value\r\n    if (allowNegative && numberIsNegative) {\r\n        digits.unshift('-');\r\n        raw = -raw;\r\n    }\r\n\r\n    return {\r\n        value: raw,\r\n        maskedValue: digits.join('').trim()\r\n    };\r\n}\r\n","Object.assign = Object.assign ||\r\n  function(target) {\r\n    for (var i = 1; i < arguments.length; i++) {\r\n      var source = arguments[i];\r\n      for (var key in source) {\r\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\r\n          target[key] = source[key];\r\n        }\r\n      }\r\n    }\r\n    return target;\r\n  };\r\n","import './object-assign-polyfill';\r\n\r\nimport PropTypes from 'prop-types';\r\nimport React, { Component }  from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport mask from './mask.js'\r\n\r\n// IE* parseFloat polyfill\r\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/parseFloat#Polyfill\r\nNumber.parseFloat = parseFloat;\r\n\r\nclass CurrencyInput extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.prepareProps = this.prepareProps.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleFocus = this.handleFocus.bind(this);\r\n        this.setSelectionRange = this.setSelectionRange.bind(this);\r\n        this.state = this.prepareProps(this.props);\r\n\r\n        this.inputSelectionStart = 1;\r\n        this.inputSelectionEnd = 1;\r\n    }\r\n\r\n\r\n    /**\r\n     * Exposes the current masked value.\r\n     *\r\n     * @returns {String}\r\n     */\r\n    getMaskedValue() {\r\n        return this.state.maskedValue;\r\n    }\r\n\r\n\r\n    /**\r\n     * General function used to cleanup and define the final props used for rendering\r\n     * @returns {{ maskedValue: {String}, value: {Number}, customProps: {Object} }}\r\n     */\r\n    prepareProps(props) {\r\n        let customProps = {...props}; // babeljs converts to Object.assign, then polyfills.\r\n        delete customProps.onChange;\r\n        delete customProps.onChangeEvent;\r\n        delete customProps.value;\r\n        delete customProps.decimalSeparator;\r\n        delete customProps.thousandSeparator;\r\n        delete customProps.precision;\r\n        delete customProps.inputType;\r\n        delete customProps.allowNegative;\r\n        delete customProps.allowEmpty;\r\n        delete customProps.prefix;\r\n        delete customProps.suffix;\r\n        delete customProps.selectAllOnFocus;\r\n        delete customProps.autoFocus;\r\n\r\n        let initialValue = props.value;\r\n        if (initialValue === null) {\r\n            initialValue = props.allowEmpty? null : '';\r\n        }else{\r\n\r\n            if (typeof initialValue == 'string') {\r\n                // Some people, when confronted with a problem, think \"I know, I'll use regular expressions.\"\r\n                // Now they have two problems.\r\n\r\n                // Strip out thousand separators, prefix, and suffix, etc.\r\n                if (props.thousandSeparator === \".\"){\r\n                    // special handle the . thousand separator\r\n                    initialValue = initialValue.replace(/\\./g, '');\r\n                }\r\n\r\n                if (props.decimalSeparator != \".\"){\r\n                    // fix the decimal separator\r\n                    initialValue = initialValue.replace(new RegExp(props.decimalSeparator, 'g'), '.');\r\n                }\r\n\r\n                //Strip out anything that is not a digit, -, or decimal separator\r\n                initialValue = initialValue.replace(/[^0-9-.]/g, '');\r\n\r\n                // now we can parse.\r\n                initialValue = Number.parseFloat(initialValue);\r\n            }\r\n            initialValue = Number(initialValue).toLocaleString(undefined, {\r\n                style                : 'decimal',\r\n                minimumFractionDigits: props.precision,\r\n                maximumFractionDigits: props.precision\r\n            })\r\n\r\n        }\r\n\r\n        const { maskedValue, value } = mask(\r\n            initialValue,\r\n            props.precision,\r\n            props.decimalSeparator,\r\n            props.thousandSeparator,\r\n            props.allowNegative,\r\n            props.prefix,\r\n            props.suffix\r\n        );\r\n\r\n        return { maskedValue, value, customProps };\r\n    }\r\n\r\n\r\n    /**\r\n     * Component lifecycle function.\r\n     * Invoked when a component is receiving new props. This method is not called for the initial render.\r\n     *\r\n     * @param nextProps\r\n     * @see https://facebook.github.io/react/docs/component-specs.html#updating-componentwillreceiveprops\r\n     */\r\n    componentWillReceiveProps(nextProps) {\r\n        this.setState(this.prepareProps(nextProps));\r\n    }\r\n\r\n\r\n    /**\r\n     * Component lifecycle function.\r\n     * @returns {XML}\r\n     * @see https://facebook.github.io/react/docs/react-component.html#componentdidmount\r\n     */\r\n    componentDidMount(){\r\n        let node = ReactDOM.findDOMNode(this.theInput);\r\n        let selectionStart, selectionEnd;\r\n\r\n        if (this.props.autoFocus) {\r\n            this.theInput.focus();\r\n            selectionEnd = this.state.maskedValue.length - this.props.suffix.length;\r\n            selectionStart = selectionEnd;\r\n        } else {\r\n            selectionEnd = Math.min(node.selectionEnd, this.theInput.value.length - this.props.suffix.length);\r\n            selectionStart = Math.min(node.selectionStart, selectionEnd);\r\n        }\r\n\r\n        this.setSelectionRange(node, selectionStart, selectionEnd);\r\n    }\r\n\r\n\r\n    /**\r\n     * Component lifecycle function\r\n     * @returns {XML}\r\n     * @see https://facebook.github.io/react/docs/react-component.html#componentwillupdate\r\n     */\r\n    componentWillUpdate() {\r\n        let node = ReactDOM.findDOMNode(this.theInput);\r\n        this.inputSelectionStart = node.selectionStart;\r\n        this.inputSelectionEnd = node.selectionEnd;\r\n    }\r\n\r\n\r\n    /**\r\n     * Component lifecycle function.\r\n     * @returns {XML}\r\n     * @see https://facebook.github.io/react/docs/react-component.html#componentdidupdate\r\n     */\r\n    componentDidUpdate(prevProps, prevState){\r\n        const { decimalSeparator } = this.props;\r\n        let node = ReactDOM.findDOMNode(this.theInput);\r\n        let isNegative = (this.theInput.value.match(/-/g) || []).length % 2 === 1;\r\n        let minPos = this.props.prefix.length + (isNegative ? 1 : 0);\r\n        let selectionEnd = Math.max(minPos, Math.min(this.inputSelectionEnd, this.theInput.value.length - this.props.suffix.length));\r\n        let selectionStart = Math.max(minPos, Math.min(this.inputSelectionEnd, selectionEnd));\r\n\r\n        let regexEscapeRegex = /[-[\\]{}()*+?.,\\\\^$|#\\s]/g;\r\n        let separatorsRegex = new RegExp(decimalSeparator.replace(regexEscapeRegex, '\\\\$&') + '|' + this.props.thousandSeparator.replace(regexEscapeRegex, '\\\\$&'), 'g');\r\n        let currSeparatorCount = (this.state.maskedValue.match(separatorsRegex) || []).length;\r\n        let prevSeparatorCount = (prevState.maskedValue.match(separatorsRegex) || []).length;\r\n        let adjustment = Math.max(currSeparatorCount - prevSeparatorCount, 0);\r\n\r\n        selectionEnd = selectionEnd + adjustment;\r\n        selectionStart = selectionStart + adjustment;\r\n\r\n        const precision = Number(this.props.precision);\r\n\r\n        let baselength = this.props.suffix.length\r\n            + this.props.prefix.length\r\n            + (precision > 0 ? decimalSeparator.length : 0) // if precision is 0 there will be no decimal part\r\n            + precision\r\n            + 1; // This is to account for the default '0' value that comes before the decimal separator\r\n\r\n        if (this.state.maskedValue.length == baselength){\r\n            // if we are already at base length, position the cursor at the end.\r\n            selectionEnd = this.theInput.value.length - this.props.suffix.length;\r\n            selectionStart = selectionEnd;\r\n        }\r\n\r\n        this.setSelectionRange(node, selectionStart, selectionEnd);\r\n        this.inputSelectionStart = selectionStart;\r\n        this.inputSelectionEnd = selectionEnd;\r\n    }\r\n\r\n    /**\r\n     * Set selection range only if input is in focused state\r\n     * @param node DOMElement\r\n     * @param start number\r\n     * @param end number\r\n     */\r\n    setSelectionRange(node, start, end) {\r\n      if (document.activeElement === node) {\r\n        node.setSelectionRange(start, end);\r\n      }\r\n    }\r\n\r\n\r\n    /**\r\n     * onChange Event Handler\r\n     * @param event\r\n     */\r\n    handleChange(event) {\r\n        event.preventDefault();\r\n        let { maskedValue, value } = mask(\r\n            event.target.value,\r\n            this.props.precision,\r\n            this.props.decimalSeparator,\r\n            this.props.thousandSeparator,\r\n            this.props.allowNegative,\r\n            this.props.prefix,\r\n            this.props.suffix\r\n        );\r\n\r\n        event.persist();  // fixes issue #23\r\n\r\n        this.setState({ maskedValue, value }, () => {\r\n            this.props.onChange(maskedValue, value, event);\r\n            this.props.onChangeEvent(event, maskedValue, value);\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * onFocus Event Handler\r\n     * @param event\r\n     */\r\n    handleFocus(event) {\r\n        if (!this.theInput) return;\r\n\r\n        //Whenever we receive focus check to see if the position is before the suffix, if not, move it.\r\n        let selectionEnd = this.theInput.value.length - this.props.suffix.length;\r\n        let isNegative = (this.theInput.value.match(/-/g) || []).length % 2 === 1;\r\n        let selectionStart = this.props.prefix.length + (isNegative ? 1 : 0);\r\n        this.props.selectAllOnFocus && event.target.setSelectionRange(selectionStart, selectionEnd);\r\n        this.inputSelectionStart = selectionStart;\r\n        this.inputSelectionEnd = selectionEnd;\r\n    }\r\n\r\n\r\n    handleBlur(event) {\r\n        this.inputSelectionStart = 0;\r\n        this.inputSelectionEnd = 0;\r\n    }\r\n\r\n\r\n    /**\r\n     * Component lifecycle function.\r\n     * @returns {XML}\r\n     * @see https://facebook.github.io/react/docs/component-specs.html#render\r\n     */\r\n    render() {\r\n        return (\r\n            <input\r\n                ref={(input) => { this.theInput = input; }}\r\n                type={this.props.inputType}\r\n                value={this.state.maskedValue}\r\n                onChange={this.handleChange}\r\n                onFocus={this.handleFocus}\r\n                onMouseUp={this.handleFocus}\r\n                {...this.state.customProps}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * Prop validation.\r\n * @see https://facebook.github.io/react/docs/component-specs.html#proptypes\r\n */\r\n\r\nCurrencyInput.propTypes = {\r\n    onChange: PropTypes.func,\r\n    value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n    decimalSeparator: PropTypes.string,\r\n    thousandSeparator: PropTypes.string,\r\n    precision: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n    inputType: PropTypes.string,\r\n    allowNegative: PropTypes.bool,\r\n    allowEmpty: PropTypes.bool,\r\n    prefix: PropTypes.string,\r\n    suffix: PropTypes.string,\r\n    selectAllOnFocus: PropTypes.bool\r\n};\r\n\r\n\r\nCurrencyInput.defaultProps = {\r\n    onChange: function(maskValue, value, event) {/*no-op*/},\r\n    onChangeEvent: function(event, maskValue, value) {/*no-op*/},\r\n    autoFocus: false,\r\n    value: '0',\r\n    decimalSeparator: '.',\r\n    thousandSeparator: ',',\r\n    precision: '2',\r\n    inputType: 'text',\r\n    allowNegative: false,\r\n    prefix: '',\r\n    suffix: '',\r\n    selectAllOnFocus: false\r\n};\r\n\r\n\r\nexport default CurrencyInput\r\n"],"names":["mask","value","precision","decimalSeparator","thousandSeparator","allowNegative","prefix","suffix","maskedValue","String","length","let","digits","match","numberIsNegative","allDigitsAreZero","idx","unshift","splice","Number","join","toFixed","split","raw","decimalpos","x","push","trim","Object","assign","target","i","arguments","key","source","prototype","hasOwnProperty","call","parseFloat","Component","getMaskedValue","this","state","CurrencyInput","prepareProps","props","customProps","initialValue","onChange","onChangeEvent","inputType","allowEmpty","selectAllOnFocus","autoFocus","replace","RegExp","toLocaleString","undefined","style","minimumFractionDigits","maximumFractionDigits","componentWillReceiveProps","nextProps","setState","componentDidMount","selectionEnd","node","ReactDOM","findDOMNode","theInput","selectionStart","focus","Math","min","setSelectionRange","componentWillUpdate","inputSelectionStart","inputSelectionEnd","componentDidUpdate","prevProps","prevState","isNegative","minPos","max","regexEscapeRegex","separatorsRegex","currSeparatorCount","prevSeparatorCount","adjustment","baselength","start","end","document","activeElement","handleChange","event","preventDefault","persist","handleFocus","handleBlur","render","React","ref","input","type","onFocus","onMouseUp","super","bind","propTypes","PropTypes","func","oneOfType","number","string","bool","defaultProps","maskValue"],"mappings":"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"}